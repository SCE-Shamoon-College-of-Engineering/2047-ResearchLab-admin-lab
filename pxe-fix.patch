*** a/Makefile
--- b/Makefile
@@
 pull: ## safe pull (fetch + hard reset; token optional)
-	@if [ ! -d .git ]; then echo "✗ не git-репозиторий: $(PWD)"; exit 1; fi
-	@if [ -n "$$GIT_AUTH_TOKEN" ]; then \
+	@if [ ! -d .git ]; then echo "✗ not a git repo: $(PWD)"; exit 1; fi
+	@if [ -n "$${GIT_AUTH_TOKEN:-}" ]; then \
 		echo "• pull через токен из \$GIT_AUTH_TOKEN"; \
 		REMOTE="https://$$GIT_AUTH_TOKEN@github.com/SCE-Shamoon-College-of-Engineering/2047-ResearchLab-admin-lab.git"; \
 	else \
 		echo "• pull через $(REPO_HTTPS)"; \
 		REMOTE="$(REPO_HTTPS)"; \
 	fi; \
 	git remote set-url origin "$$REMOTE" || true; \
 	git fetch --prune origin; \
 	git reset --hard "origin/$(BRANCH)"; \
 	git rev-parse --short HEAD | xargs -I{} echo "✓ now on commit {}"
*** a/scripts/02-quick-pxe-setup.sh
--- b/scripts/02-quick-pxe-setup.sh
@@
-#!/usr/bin/env bash
-set -euo pipefail
-
-HTTP_IP="${HTTP_IP:-192.168.1.250}"
-NIC_NAME="${NIC_NAME:-enp0s31f6}"
+#!/usr/bin/env bash
+set -euo pipefail
+# HTTP_IP can be overridden by Makefile target pxe-http
+HTTP_IP="${HTTP_IP:-192.168.1.250}"
+# Your lab NIC (detected earlier as enp0s31f6)
+NIC_NAME="${NIC_NAME:-enp0s31f6}"
 
 WWW_ROOT="/var/www/html"
 TFTP_ROOT="/srv/tftp"
 DNSMASQ_D="/etc/dnsmasq.d"
-DNSMASQ_DEF="/etc/default/dnsmasq"
+DNSMASQ_DEF="/etc/default/dnsmasq"
 
 echo "[*] Installing packages (dnsmasq, apache2, curl)..."
 export DEBIAN_FRONTEND=noninteractive
-apt-get update -y
-apt-get install -y dnsmasq apache2 curl
+apt-get update -y
+apt-get install -y dnsmasq apache2 curl ipxe
 
-echo "[*] Configure dnsmasq for HTTP-boot..."
-install -m 0644 -o root -g root "configs/pxe-http.conf" "${DNSMASQ_D}/pxe-http.conf"
-sed -i "s|192.168.1.250|${HTTP_IP}|g" "${DNSMASQ_D}/pxe-http.conf"
-sed -i "s|interface=enp0s31f6|interface=${NIC_NAME}|g" "${DNSMASQ_D}/pxe-http.conf"
-
-# Force systemd to start dnsmasq with correct interface (even if other configs exist)
-install -m 0644 -o root -g root "configs/dnsmasq.default" "${DNSMASQ_DEF}"
-sed -i "s|enp0s31f6|${NIC_NAME}|g" "${DNSMASQ_DEF}"
+echo "[*] Configure dnsmasq (Proxy-DHCP + HTTPBoot + iPXE fallback)"
+# 1) lay down our PXE config
+install -m 0644 -o root -g root "configs/pxe-http.conf" "${DNSMASQ_D}/pxe-http.conf"
+sed -i "s|192.168.1.250|${HTTP_IP}|g" "${DNSMASQ_D}/pxe-http.conf"
+sed -i "s|interface=enp0s31f6|interface=${NIC_NAME}|g" "${DNSMASQ_D}/pxe-http.conf"
+# 2) ensure service uses sane defaults (no custom override unit)
+install -m 0644 -o root -g root "configs/dnsmasq.default" "${DNSMASQ_DEF}"
+sed -i "s|enp0s31f6|${NIC_NAME}|g" "${DNSMASQ_DEF}"
+rm -f /etc/systemd/system/dnsmasq.service.d/override.conf || true
+systemctl daemon-reload
 
 # Ensure trees exist
 mkdir -p "${TFTP_ROOT}" "${WWW_ROOT}/EFI/BOOT" "${WWW_ROOT}/ubuntu" "${WWW_ROOT}/autoinstall"
 
+# iPXE fallback loader via TFTP
+if [ -f /usr/lib/ipxe/ipxe.efi ]; then
+  install -m 0644 -o nobody -g nogroup /usr/lib/ipxe/ipxe.efi "${TFTP_ROOT}/ipxe.efi"
+fi
+# iPXE script via HTTP
+install -m 0644 -o www-data -g www-data "www/boot.ipxe" "${WWW_ROOT}/boot.ipxe"
+
 # (остальной код: копирование vmlinuz/initrd и EFI, твои блоки остаются как были)
 
 echo "[*] Restart services..."
 systemctl restart apache2
-systemctl restart dnsmasq
+systemctl restart dnsmasq || (journalctl -xeu dnsmasq.service --no-pager | tail -n 60; exit 1)
 
 echo "[*] Sanity checks:"
 ss -lunp | grep -E ':(69|4011)\b' || true
 curl -I "http://${HTTP_IP}/EFI/BOOT/bootx64.efi" || true
 curl -I "http://${HTTP_IP}/ubuntu/vmlinuz" || true
 curl -I "http://${HTTP_IP}/autoinstall/user-data" || true
*** /dev/null
--- b/configs/dnsmasq.default
@@
+#!/bin/sh
+# Extra options for dnsmasq started by systemd (no DNS, bind to lab NIC)
+DNSMASQ_OPTS="--interface=enp0s31f6 --bind-interfaces --except-interface=lo --no-resolv --port=0"
*** a/configs/pxe-http.conf
--- b/configs/pxe-http.conf
@@
-# (old content replaced)
+interface=enp0s31f6
+bind-interfaces
+no-resolv
+except-interface=lo
+port=0
+
+# FortiGate provides IPs -> act as Proxy-DHCP (PXE options only)
+dhcp-range=192.168.1.0,proxy
+
+# UEFI architecture matches (no spaces after commas)
+dhcp-match=set:efihttp,option:client-arch,16
+dhcp-match=set:efi64,option:client-arch,7
+dhcp-match=set:efi32,option:client-arch,6
+
+# Native UEFI HTTPBoot
+dhcp-boot=tag:efihttp,http://192.168.1.250/EFI/BOOT/bootx64.efi
+
+# Legacy PXE -> iPXE -> HTTP
+enable-tftp
+tftp-root=/srv/tftp
+pxe-service=X86PC,"iPXE network boot",ipxe.efi
+dhcp-userclass=set:ipxe,iPXE
+dhcp-boot=tag:ipxe,http://192.168.1.250/boot.ipxe
+
+log-dhcp
+log-queries
+log-facility=/var/log/dnsmasq.log
*** /dev/null
--- b/www/boot.ipxe
@@
+#!ipxe
+set base-url http://192.168.1.250
+kernel ${base-url}/ubuntu/vmlinuz ip=dhcp autoinstall ds=nocloud-net;s=${base-url}/autoinstall/
+initrd ${base-url}/ubuntu/initrd
+boot
